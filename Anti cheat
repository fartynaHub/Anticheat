-- üîí Full AntiCheat Script with GUI Check
-- –ü–æ–º–µ—Å—Ç–∏ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ ServerScriptService

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local StarterGui = game:GetService("StarterGui")

-- ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
local MAX_WALK_SPEED = 16
local SPEED_BUFFER = 5
local MAX_JUMP_POWER = 50
local JUMP_BUFFER = 10
local MAX_AIR_TIME = 3
local CHECK_INTERVAL = 0.5
local MAX_DISTANCE_PER_CHECK = 20
local MAX_STRIKES = 3

-- üìù –î–∞–Ω–Ω—ã–µ –ø–æ –∏–≥—Ä–æ–∫–∞–º
local playerData = {}

-- üìã –í–∞–π—Ç–ª–∏—Å—Ç GUI (—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ)
local guiWhitelist = {}
for _, gui in ipairs(StarterGui:GetChildren()) do
    if gui:IsA("ScreenGui") then
        guiWhitelist[gui.Name] = true
    end
end

-- ‚ö°Ô∏è –ù–∞–∫–∞–∑–∞–Ω–∏–µ
local function punishPlayer(player, reason, action)
    local data = playerData[player]
    if not data then return end
    
    data.strikes = (data.strikes or 0) + 1
    warn(("[AntiCheat] %s –Ω–∞—Ä—É—à–∏–ª (%s). –°—Ç—Ä–∞–π–∫–æ–≤: %d"):format(player.Name, reason, data.strikes))

    if action == "teleport_back" and data.lastValidPosition then
        local rootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.CFrame = CFrame.new(data.lastValidPosition + Vector3.new(0,2,0))
        end
    end
    
    if data.strikes >= MAX_STRIKES or action == "kick" then
        player:Kick("Cheat detected: " .. reason)
    end
end

-- üöÄ –î–ï–¢–ï–ö–¢ –°–ö–û–†–û–°–¢–ò –ò –¢–ï–õ–ï–ü–û–†–¢–ê
local function checkSpeed(player)
    local data = playerData[player]
    local character = player.Character
    if not (data and character) then return end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    
    local currentPos = rootPart.Position
    local dist = (currentPos - data.lastPosition).Magnitude
    local speed = dist / data.dt
    
    if speed > (MAX_WALK_SPEED + SPEED_BUFFER) or dist > MAX_DISTANCE_PER_CHECK then
        punishPlayer(player, "Speed/Teleport", "teleport_back")
    else
        data.lastValidPosition = currentPos
    end
    
    data.lastPosition = currentPos
end

-- ü¶ò –î–ï–¢–ï–ö–¢ –í–´–°–û–ö–ò–• –ü–†–´–ñ–ö–û–í
local function checkJump(player)
    local character = player.Character
    if not character then return end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid and humanoid.UseJumpPower then
        if humanoid.JumpPower > (MAX_JUMP_POWER + JUMP_BUFFER) then
            humanoid.JumpPower = MAX_JUMP_POWER
            punishPlayer(player, "Jump hack", "teleport_back")
        end
    end
end

-- ‚úàÔ∏è –î–ï–¢–ï–ö–¢ –§–õ–ê–Ø
local function checkFly(player)
    local data = playerData[player]
    local character = player.Character
    if not (data and character) then return end
    
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        if humanoid:GetState() == Enum.HumanoidStateType.Freefall then
            data.airTime = (data.airTime or 0) + data.dt
            if data.airTime > MAX_AIR_TIME then
                punishPlayer(player, "Fly hack", "teleport_back")
                data.airTime = 0
            end
        else
            data.airTime = 0
        end
    end
end

-- üö™ –î–ï–¢–ï–ö–¢ NOCLIP
local function checkNoClip(player)
    local data = playerData[player]
    local character = player.Character
    if not (data and character) then return end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return end
    
    for _, part in ipairs(rootPart:GetTouchingParts()) do
        if part.CanCollide and part:IsDescendantOf(workspace) and not part:IsDescendantOf(character) then
            punishPlayer(player, "NoClip", "teleport_back")
            return
        end
    end
    
    data.lastValidPosition = rootPart.Position
end

-- üñ•Ô∏è –î–ï–¢–ï–ö–¢ –°–¢–û–†–û–ù–ù–ò–• GUI
local function checkGui(player)
    local playerGui = player:FindFirstChild("PlayerGui")
    if not playerGui then return end
    
    for _, gui in ipairs(playerGui:GetChildren()) do
        if gui:IsA("ScreenGui") then
            if not guiWhitelist[gui.Name] then
                punishPlayer(player, "Unauthorized GUI (" .. gui.Name .. ")", "kick")
            end
        end
    end
end

-- üë§ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
local function onPlayerAdded(player)
    playerData[player] = {
        lastPosition = Vector3.new(0,0,0),
        lastValidPosition = Vector3.new(0,0,0),
        dt = 0,
        airTime = 0,
        strikes = 0
    }
    
    player.CharacterAdded:Connect(function(character)
        local rootPart = character:WaitForChild("HumanoidRootPart")
        playerData[player].lastPosition = rootPart.Position
        playerData[player].lastValidPosition = rootPart.Position
        
        local humanoid = character:WaitForChild("Humanoid")
        humanoid:GetPropertyChangedSignal("JumpPower"):Connect(function()
            checkJump(player)
        end)
        humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
            if humanoid.WalkSpeed > (MAX_WALK_SPEED + SPEED_BUFFER) then
                humanoid.WalkSpeed = MAX_WALK_SPEED
                punishPlayer(player, "WalkSpeed hack", "teleport_back")
            end
        end)
    end)
    
    -- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è GUI
    player.PlayerGui.ChildAdded:Connect(function(child)
        if child:IsA("ScreenGui") and not guiWhitelist[child.Name] then
            punishPlayer(player, "Injected GUI (" .. child.Name .. ")", "kick")
        end
    end)
end

-- ‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ç–∞–π–º–µ—Ä—É
local function onHeartbeat(dt)
    for player, data in pairs(playerData) do
        if player.Character then
            data.dt = (data.dt or 0) + dt
            if data.dt >= CHECK_INTERVAL then
                checkSpeed(player)   -- —Å–∫–æ—Ä–æ—Å—Ç—å/—Ç–µ–ª–µ–ø–æ—Ä—Ç
                checkFly(player)     -- —Ñ–ª–∞–π
                checkNoClip(player)  -- –Ω–æ—É–∫–ª–∏–ø
                checkJump(player)    -- –ø—Ä—ã–∂–æ–∫
                checkGui(player)     -- –ª–∏—à–Ω–∏–π GUI
                data.dt = 0
            end
        end
    end
end

-- üìå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
Players.PlayerAdded:Connect(onPlayerAdded)
for _, player in ipairs(Players:GetPlayers()) do
    onPlayerAdded(player)
end

RunService.Heartbeat:Connect(onHeartbeat)
